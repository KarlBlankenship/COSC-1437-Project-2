// Karl Blankenship
// COSC 1437
// Project II - Type of Numbers
// June 2018
// Filename: TypeOfNumbers.java


import java.io.*;		//Required for file Input and Output.
import java.util.*;		//Required for random number generator.


/**
	This class creates a main method program to determine what type of number 
	has been generated by a random integer generator and display the results
 	on screen and in a text file. This class will determine if the random 
 	number generated is any of the following number types. Even, Prime, Circular
 	Prime, Perfect,	Perfect Square or Cube.
	@author Karl Blankenship
*/

public class TypeOfNumbers {

	public static void main(String[] args) throws IOException {
				
		//Set how many random numbers should be generated and analyzed.
		final int numbersToTest = 10;
		
		//Set how large of a random number should be generated.
		final int largestRandom = 100;
		
		// Creates an instance of a Random class.
		Random randomNumber = new Random();
		
		// Create a new output file object.
		PrintWriter outputFile = new PrintWriter("number_types.txt");
		
		// Create the header string
		String header = String.format("%-16s%-16s%-16s%-16s%-16s%-16s%-16s",
							"Number", "Even", "Prime", "Circular Prime",
							"Perfect", "Perfect Square", "Cube");
		
		// Create display output header.
		System.out.println(header);
				
		// Write header to output file.
		outputFile.println(header);
				
		// Generate random numbers, determine types and write output.
		for (int i=0; i < numbersToTest; i++) {
			
			int generatedRandomNumber = randomNumber.nextInt(largestRandom);
			
			// Create output string.
			String outputString = String.format("%-16d%-16b%-16b%-16b%-16b%-16b%-16b", 
												generatedRandomNumber, 
												TypeOfNumbers.isEven(generatedRandomNumber),
												TypeOfNumbers.isPrime(generatedRandomNumber),
												TypeOfNumbers.isCircularPrime(generatedRandomNumber),
												TypeOfNumbers.isPerfectNumber(generatedRandomNumber),
												TypeOfNumbers.isPerfectSquare(generatedRandomNumber),
												TypeOfNumbers.isCube(generatedRandomNumber));
			
			// Write output string to display.
			System.out.println(outputString);
			
			// Write output string to output file.
			outputFile.println(outputString);
		}
		
		// Close output file to write buffer to file.
		outputFile.close();
	}
	
	
	/**
		The isEven method determines whether an input integer is even.
		@param input The integer number to be tested for even.
		@return flag A boolean true if input parameter is even, 
		false if it is not even.
	*/
	
	public static boolean isEven(int input) {
		
		// Declare boolean flag as false initially.
		boolean flag = false;
		
		// Test for even and return result.
		if (input % 2 == 0)
			flag = true;
		
		// Return the result.
		return flag;
	}
	
	
	/**
	The isPrime method determines whether an input integer is prime.
	@param input The integer number to be tested for prime.
	@return flag A boolean true if input parameter is prime, 
	false if it is not prime.
	*/

	public static boolean isPrime(int input) {
		
		// Declare boolean flag as true initially to assume all numbers
		// are prime until tests show they are not.
		boolean flag = true;
			
		// 0 and 1 are not prime so if an input is less then or equal to one
		// then it is not prime.
		if (input <= 1)		
			flag = false;
		
		// If input integer is 2 or 3 then the initial flag = true assumption stands.
		
		// Input integer is four or higher so must be tested.
		else if (input > 3) {		
			
			// For-loop through all possible factors from 2 up to input/i to save cycles.
			for (int i=2; i <= (input/i); i++) {		
				
				// If factor divides evenly then input is not a prime so set flag to false.
				if (input % i == 0) {			
					flag = false;
					break;
				}		
			}	
		}
		
		// Return the result.
		return flag;
	}	
	
	
	/**
	The isCircularPrime method determines whether a number is a circular prime.
	@param input The integer number to be tested for prime.
	@return flag A boolean true if input parameter is prime, false if it is not prime.
	*/

	public static boolean isCircularPrime(int input) {
		
		// Declare boolean flag as true initially.
		boolean flag = true;
		
		// Check for single digit prime. If single digit prime then circular prime as well.
		if (input < 10)
			flag = isPrime(input);
		
		// All input integers that are larger than 9 (one digit).
		else {
			
			// Check to see if input integer contains any of the following digits,
			// 0, 2, 4, 5, 6 or 8. Can't be circular prime if it contains any of these.
			
			// Create a string object to hold input integer as a string.
			String numberAsString = Integer.toString(input);
			
			// Create a 1 dimensional integer array of unacceptable digits.
			int[] unacceptableDigits = {0, 2, 4, 5, 6, 8};
			
			// Compare every element of the array to the input integer string object.
			for (int i=0; i < unacceptableDigits.length; i++ ) {
				
				// If input integer string contains an array value then input cannot
				// be a circular prime and flag is set to false.
				if (numberAsString.contains(Integer.toString(unacceptableDigits[i]))) {
					flag = false;
					break;
				}
			}
			
			// If single digit prime and unacceptable digit tests did not eliminate the 
			// input number then the flag is still true and all circular permutations 
			// can be tested.
			if (flag == true) {
				
				// Copy input to a local integer variable so that cycled number can be
				// reused for the next cycle.
				int number = input;		
				
				// For-loop thru all circulated number sequences.
				for (int i=0; i < Integer.toString(number).length(); i++) {
					number = circulateNumber(number);
					
					// Input is already assumed to be true so set flag to false if a
					// permutation is found to be false.
					if (!isPrime(number)) {
						flag = isPrime(number);
						break;
					}
				}
			}		
		}	

		// Return the result.
		return flag;
	}
	
	
	/**
	The circulateNumber method will move the last digit of an 
	integer to the first digit.
	@param input The integer number to be circulated. Example: 12345
	@return The circulated integer. Example: 51234
	*/

	public static int circulateNumber(int input) {
		
		// Define the remainder for use with modulo. This will 
		// isolate the last digit of the input integer.
		int remainder = 0;		
		// Define tenth as an integer value. This will be used to
		// isolate all of the numbers except the last digit
		// which will be rounded away.
		int tenth = 0;
		// Define power as an integer value of 1. This will be used
		// in reconstructing the circulated number.
		int power = 1;	
		
		remainder = input % 10;		// Sets remainder as the last digit.
		tenth = input / 10;			// Sets tenth to all digits except the last.
		
		// Set power to 10^(n-1) without using Math.pow API.
		for (int j=1; j < Integer.toString(input).length(); j++) {
			power = power * 10;
		}
		
		// Combine factors and return circulated number.
		return (power * remainder + tenth);
	}
	
	
	/**
	The isPerfectNumber method determines whether a number is perfect 
	meaning that it is equal to the sum of its divisors.
	@param input The integer number to be tested for perfect.
	@return flag A boolean true if input parameter is perfect, 
	false if it is not perfect.
	*/
	
	public static boolean isPerfectNumber(int input) {
				
		// Declare boolean flag as false assuming all integers 
		// are not perfect until tested.
		boolean flag = false;
		
		// Begin with numbers greater than 1 since a perfect number is
		// a sum of its divisors other than itself which excludes 1.  
		if (input > 1) {	
			
			// Declare integer sum equal to 1 since all numbers
			// will have one as a factor.
			int sum = 1;	
			
			// For-loop thru possible factors and check to see if each
			// possible factor is a true factor. If it is then add that 
			//factor and its corresponding factor to the sum.
			for (int i=2; i < input/i; i++ ) {
				if (input % i == 0) {
					sum = sum + i + (input/i);
				}
			}
			
			// Check to see if the sum of factors does equal the input.
			if (sum == input)
				flag = true;
		}
				
		// Return the result.
		return flag;
	}
	
	
	/**
	The isPerfectSquare method determines whether a number is a perfect
	square meaning that it is equal to an integer squared. 
	Not considering zero to be a perfect square.
	@param input The integer number to be tested for perfect square.
	@return flag A boolean true if input parameter is a perfect square, 
	false if it is not a perfect square.
	*/
	
	public static boolean isPerfectSquare(int input) {
		
		// Declare boolean flag as false assuming all integers
		// are not perfect squares until tested.
		boolean flag = false;
		
		// Try all possible factors of the input integer and test whether
		// the factor^2 will equal the original input integer.
		for (int i=1; i <= input/i; i++) {	// Use input/i to reduce iterations.
			if ((i * i) == input) {
				flag = true;	// Set flag to true since this tests positive.
				break;
			}
		}
				
		// Return the result.
		return flag;
	}
	
	
	/**
	The isCube method determines whether a number is a cube meaning 
	that it is equal to a factor cubed (factor * factor * factor).
	Not considering zero to be a cube.
	@param input The integer number to be tested for cube.
	@return flag A boolean true if input parameter is a perfect cube, 
	false if it is not a perfect cube.
	*/
	
	public static boolean isCube(int input) {
			
		// Declare boolean flag as false assuming all integers
		// are not cubes until tested.
		boolean flag = false;	
		
		// Try all possible factors of the input integer and test whether
		// the factor^3 will equal the original input integer.
		for (int i=1; i <= input/(i*i); i++) {	// Use input/(i*i) to reduce iterations.
			if ((i * i * i) == input) {
				flag = true;	// Set flag to true since this tests positive. 
				break;
			}
		}
				
		// Return the result.
		return flag;
	}
}
